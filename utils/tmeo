// dere vertical
  while (tempCol < size && band) {
    tempCol++
    if ( state.getIn([tempCol, row]) !== '0 ' && state.getIn([tempCol, row]) !== chip_name_a ) {
      band = true
    }
    else {
      if (state.getIn([tempCol, row]) !== chip_name_a) {
        band = false
      }
      break;
    }
  }
  if (band) {
    while (tempCol > col) {
      tempCol--;
      state = state.setIn([tempCol, row], chip_name_a)
    }
  }

  // arriba vertical
  band = true
  tempCol = col
  tempRow = row
  while (tempCol >= 0 && band) {
    tempCol--
    if ( state.getIn([tempCol, row]) !== '0 ' && state.getIn([tempCol, row]) !== chip_name_a ) {
      band = true
    }
    else {
      if (state.getIn([tempCol, row]) !== chip_name_a) {
        band = false
      }
      break;
    }
  }
  if (band) {
    while (tempCol < col) {
      tempCol++;
      state = state.setIn([tempCol, row], chip_name_a)
    }
  }


  // atras horiz
  band = true
  tempCol = col
  tempRow = row
  while (tempRow >= 0 && band) {
    tempRow--
    if ( state.getIn([col, tempRow]) !== '0 ' && state.getIn([col, tempRow]) !== chip_name_a ) {
      band = true
    }
    else {
      if (state.getIn([col, tempRow]) !== chip_name_a) {
        band = false
      }
      break;
    }
  }
  if (band) {
    while (tempRow < row) {
      tempRow++;
      state = state.setIn([col, tempRow], chip_name_a)
    }
  }

  // plante horizontal
  band = true
  tempCol = col
  tempRow = row
  while (tempRow < size && band) {
    tempRow++
    if ( state.getIn([col, tempRow]) !== '0 ' && state.getIn([col, tempRow]) !== chip_name_a ) {
      band = true
    }
    else {
      if (state.getIn([col, tempRow]) !== chip_name_a) {
        band = false
      }
      break;
    }
  }
  if (band) {
    while (tempRow > row) {
      tempRow--;
      state = state.setIn([col, tempRow], chip_name_a)
    }
  }
  // diagonal , abajo dere
  band = true
  tempCol = col
  tempRow = row

  while (tempCol < size && tempRow < size && band) {
    tempCol++
    tempRow++
    if ( state.getIn([tempCol, tempRow]) !== '0 ' && state.getIn([tempCol, tempRow]) !== chip_name_a ) {
      band = true
    }
    else {
      if (state.getIn([tempCol, tempRow]) !== chip_name_a) {
        band = false
      }
      break;
    }
  }
  if (band) {
    while (tempCol > col && tempRow > row) {
      tempCol--;
      tempRow--;
      state = state.setIn([tempCol, tempRow], chip_name_a)
    }
  }

  // diagonal , arriba dere
  band = true
  tempCol = col
  tempRow = row

  while (tempCol >= 0 && tempRow < size && band) {
    tempCol--
    tempRow++
    if ( state.getIn([tempCol, tempRow]) !== '0 ' && state.getIn([tempCol, tempRow]) !== chip_name_a ) {
      band = true
    }
    else {
      if (state.getIn([tempCol, tempRow]) !== chip_name_a) {
        band = false
      }
      break;
    }
  }
  if (band) {
    while (tempCol < col && tempRow > row) {
      tempCol++;
      tempRow--;
      state = state.setIn([tempCol, tempRow], chip_name_a)
    }
  }

// diagoanl abajo izq
  while (tempCol < size && tempRow >= 0 && band) {
    tempCol++
    tempRow--
    if ( state.getIn([tempCol, tempRow]) !== '0 ' && state.getIn([tempCol, tempRow]) !== chip_name_a ) {
      band = true
    }
    else {
      if (state.getIn([tempCol, tempRow]) !== chip_name_a) {
        band = false
      }
      break;
    }
  }
  if (band) {
    while (tempCol > col && tempRow < row) {
      tempCol--;
      tempRow++;
      state = state.setIn([tempCol, tempRow], chip_name_a)
    }
  }


  // diagonal arriba iqz
  // diagonal , abajo dere
  band = true
  tempCol = col
  tempRow = row

  while (tempCol >= 0 && tempRow >= 0 && band) {
    tempCol--
    tempRow--
    if ( state.getIn([tempCol, tempRow]) !== '0 ' && state.getIn([tempCol, tempRow]) !== chip_name_a ) {
      band = true
    }
    else {
      if (state.getIn([tempCol, tempRow]) !== chip_name_a) {
        band = false
      }
      break;
    }
  }
  if (band) {
    while (tempCol < col && tempRow < row) {
      tempCol++;
      tempRow++;
      state = state.setIn([tempCol, tempRow], chip_name_a)
    }
  }